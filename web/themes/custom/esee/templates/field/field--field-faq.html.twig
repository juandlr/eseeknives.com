{#
/**
 * @file
 * Theme override for a field.
 *
 * To override output, copy the "field.html.twig" from the templates directory
 * to your theme's directory and customize it, just like customizing other
 * Drupal templates such as page.html.twig or node.html.twig.
 *
 * Instead of overriding the theming for all fields, you can also just override
 * theming for a subset of fields using
 * @link themeable Theme hook suggestions. @endlink For example,
 * here are some theme hook suggestions that can be used for a field_foo field
 * on an article node type:
 * - field--node--field-foo--article.html.twig
 * - field--node--field-foo.html.twig
 * - field--node--article.html.twig
 * - field--field-foo.html.twig
 * - field--text-with-summary.html.twig
 * - field.html.twig
 *
 * Available variables:
 * - attributes: HTML attributes for the containing element.
 * - label_hidden: Whether to show the field label or not.
 * - title_attributes: HTML attributes for the title.
 * - label: The label for the field.
 * - multiple: TRUE if a field can contain multiple items.
 * - items: List of all the field items. Each item contains:
 *   - attributes: List of HTML attributes for each item.
 *   - content: The field item's content.
 * - entity_type: The entity type to which the field belongs.
 * - field_name: The name of the field.
 * - field_type: The type of the field.
 * - label_display: The display settings for the label.
 *
 *
 * @see template_preprocess_field()
 */
#}
{%
  set classes = [
    'field',
    'field--name-' ~ field_name|clean_class,
    'field--type-' ~ field_type|clean_class,
    'field--label-' ~ label_display,
    label_display == 'inline' ? 'clearfix',
  ]
%}
{%
  set title_classes = [
    'field__label',
    label_display == 'visually_hidden' ? 'visually-hidden',
  ]
%}

{% set items_json = [] %}
{% for item in items %}
  {% set item_data = {
    header: item.content['#paragraph'].field_label.value,
    content: item.content['#paragraph'].field_body.value
  } %}
  {% set items_json = items_json|merge([item_data]) %}
{% endfor %}



<div class="accordion" x-data='{      active: null,
                    items: {{ items_json|json_encode|raw }}
                }'>
  <template x-for="(item, index) in items" :key="index">
    <div class="my-2">
      <div  @click="active === index ? active = null : active = index"
            class="hover:text-forestGreen cursor-pointer flex py-2 uppercase"
            :class="{'text-forestGreen': active === index}">
        <i class="relative mt-1 mr-2" :class="{'fa-solid fa-plus': active !== index, 'fa-solid fa-minus': active === index}"></i> <span x-text="item.header"></span>
      </div>
      <div x-show="active === index">
        <div class="text-sm" x-html="item.content"></div>
      </div>
    </div>
  </template>
</div>
